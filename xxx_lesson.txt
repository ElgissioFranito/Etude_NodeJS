-------------------   APPRENDRE NODE.JS --------------------------

A - th√©orie sur l'√©cosyst√®me de NodeJS


B - Pratique

    I - Premier pas sur nodeJS
        - Il faut cr√©er un dossier(nomProjet = Etude_NodeJS) qui a un fichier 
        javaScript(app.js, main.js, index.js, server.js) qui est le point d'entr√©e 
        de notre application. Il contiendra just:
        console.log('Hello Node üòò')

        - ensuite executer dans le terminal: (assurez-vous √™tre dans le dossier /nomProjet)
        node app.js


    II - package.json
        - il s'agit d'un fichier qu'on trouve g√©n√©ralement dans tous les projets javaScript.
        - 02 r√¥les: 
            => description de l'application (nom, version, licence, auteur,...)
            => lister toutes les d√©pendances de l'application et leurs d√©pendances
            bonus: scripter pour automatiser certains taches
                ex : dans scripts, dans package.json on peut mettre:
                "scripts" : {
                    "nomScript": "node app.js"
                },
                on peut executer "node app.js" en "npm run nomScript"

        - on peut cr√©er un fichier package.json √† la main ou avec la commande npm:
            npm init
            et r√©pondre √† plusieurs questions 

    
    III - ExpressJS
        - c'est le framework le plus populaire pour cr√©er un API Rest avec NodeJS
        - pour l'installer: npm install express 
        - Express se trouve dans le node_modules l√† o√π on est recommander de ne pas modifier qlq chose dedans 

        - dans le fichier app.js, on peut changer en:
            const express = require('express');         // aller chercher express dans le node_modules

            const app = express();                      // cr√©er un server web de l'api
            const port = 3000;                          // le port ou on va d√©marrer notre api

            app.get('/', (req, res) => res.send("Hello Express üòö !!"));    // endpoint

            app.listen(port,                                      // on d√©marre l'api sur le port 3000, et on affiche un message sur le terminal
            () => console.log
            (`notre application d√©marre sur : http://localhost:${port}`));

        c'est le stricte minimum pour √©crire in code express
        - endpoint : c'est le coeur de l'express 
            -> get : c'est la m√©thode de la request (get, post, put, delete,...) qui prend 02 params(route, fonction)
            -> '/' : c'est la route de la request ('/home', '/search', '/createPersonne',...)
            -> (req, res) => {} : c'est une fonction fl√©ch√© qui prend 02 params 
                req : request (r√©cup√®re la requ√™te du client)
                res : response (objet qu'on va renvoyer au client)
        - en faisant node app.js, et si on change quelque chose dans le code apr√®s, on ne va pas voir de changement dans l'execution
        car on doit red√©marrer le server (Ctrl+C ensuite node app.js) pour voir le changement


    IV - Nodemon
        - c'est un module de nodeJS qui a pour principe de red√©marrer le server de l'api √† chaque changement dans node code
        - pour l'installer: npm install nodemon --save-dev
        - pour l'executer: nodemon app.js
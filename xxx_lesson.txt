------------------------------------------------------------------------------------
------------------------------  APPRENDRE NODE.JS ----------------------------------
------------------------------------------------------------------------------------

A - thÃ©orie sur l'Ã©cosystÃ¨me de NodeJS


B - Pratique
    Premier pas: 
    - tÃ©lÃ©charger et installer nodeJS LTS
    - tÃ©lÃ©charger et installer npm LTS (s'il n'est pas encore installer avec nodeJS)
    - tÃ©lÃ©charger et installer un Ã©diteur de texte (VScode,...)

    I - Premier pas sur nodeJS
        - Il faut crÃ©er un dossier(nomProjet = Etude_NodeJS) qui a un fichier 
        javaScript(app.js, main.js, index.js, server.js) qui est le point d'entrÃ©e 
        de notre application. Il contiendra just:
        console.log('Hello Node ğŸ˜˜')

        - ensuite executer dans le terminal: (assurez-vous Ãªtre dans le dossier /nomProjet)
            $ node app.js


    II - package.json
        - il s'agit d'un fichier qu'on trouve gÃ©nÃ©ralement dans tous les projets javaScript.
        - 02 rÃ´les: 
            => description de l'application (nom, version, licence, auteur,...)
            => lister toutes les dÃ©pendances de l'application et leurs dÃ©pendances
            bonus: scripter pour automatiser certains taches
                ex : dans scripts, dans package.json on peut mettre:
                "scripts" : {
                    "nomScript": "node app.js"
                },
                on peut executer "node app.js" comme alias "npm run nomScript"

        - crÃ©er un fichier package.json
        - on peut crÃ©er un fichier package.json Ã  la main ou avec la commande npm:
            $ npm init              // et rÃ©pondre Ã  plusieurs questions

    
    III - ExpressJS
    C'est quoi?
        - c'est le framework le plus populaire pour crÃ©er un API Rest avec NodeJS
    
    Comment utiliser?
        - pour l'installer: npm install express 
        - Express se trouve dans le "node_modules" lÃ  oÃ¹ tous les librairies sont tÃ©lÃ©chargÃ©, installÃ©
        et on est recommander de ne pas modifier qlq chose. (NB: tous les librairies installÃ©s dans le projet sont inscrit 
        dans package.json dans l'objet "dependencies")

        - dans le fichier app.js, on peut changer en:
            const express = require('express');         // aller chercher express dans le node_modules

            const app = express();                      // crÃ©er un server web de l'api
            const port = 3000;                          // le port ou on va dÃ©marrer notre api

            app.get('/', (req, res) => res.send("Hello Express ğŸ˜š !!"));    // endpoint

            app.listen(port,                                      // on dÃ©marre l'api sur le port 3000, et on affiche un message sur le terminal
            () => console.log
            (`notre application dÃ©marre sur : http://localhost:${port}`));

        c'est le stricte minimum pour Ã©crire in code express

        - endpoint : c'est le coeur de l'express 
            -> get : c'est la mÃ©thode de la request (get, post, put, delete,...) qui prend 02 params(route, fonction)
            -> '/' : c'est la route de la request ('/home', '/search', '/createPersonne',...)
            -> (req, res) => {} : c'est une fonction flÃ©chÃ© qui prend 02 params 
                req : request (rÃ©cupÃ¨re la requÃªte du client)
                res : response (objet qu'on va renvoyer au client)
        - en faisant node app.js, et si on change quelque chose dans le code aprÃ¨s, on ne va pas voir de changement dans l'execution
        car on doit redÃ©marrer le server (Ctrl+C ensuite node app.js) pour voir le changement


    IV - Nodemon
        - c'est un module de nodeJS qui a pour principe de redÃ©marrer le server de l'api Ã  chaque changement dans node code
        - pour l'installer: npm install nodemon --save-dev
        - pour l'executer: nodemon app.js (on peut aussi just changer le script dans package.json en 
                                            "nomScript": "nodemon app.js" )


    V - Routes
        - On utilise les routes pour crÃ©er des nouvels points de terminaison (endpoint = http://localhost/pokemon/1)
        - une route = app.METHODEhttp("/ROUTE",FONCTIONgestionnaire(request,response))
                    express() . [get,post,put,delete // toujours en miniscule] ("/accueil", (req,res) => res.send("haha")) 

        exemples des routes avec express:
        - app.get('/pokemon/1',(req,res) => res.send("Les informations du Pokemon nÂ°1!")),
        - app.get('/pokemons',(req,res) => res.send("Vous voulez rÃ©cupÃ©rer tout les pokemons")),
        - app.post('/pokemon',(req,res) => res.send("Vous venez d'\ajouter un nouveau Pokemon au pokÃ©dex")),
        - app.put('/pokemon/1',(req,res) => res.send("Vous souhaitez modifier le Pokemon nÂ°1")),
        - app.delete('/pokemon/1',(req,res) => res.send("Le Pokemon nÂ°1 vient d'\Ãªtre supprimÃ©s")),
        - app.delete('/pokemons',(req,res) => res.send("Oh, mince ! Vous venez de supprimer tous les Pokemon")),
        

    V - Passer un paramÃ¨tre dans un endpoint
        - C'est utile pour rendre dynamique une route et ne pas rÃ©pÃ©ter un endpoint de tous les enregistrement (ex: pokemons)         
        - pour le faire, il faut juste ajouter un ":" devant le nom du paramÃ¨tre dans la route        
            app.get('/pokemon/:id',(req,res) => {
                const identifiant = req.params.id;
                res.send(`vous avez demander le pokemon nÂ°${identifiant}`);
            });
        - passer plusieurs paramÃ¨tres dans un endpoint :      
            app.get('/pokemon/:id/:name',(req,res) => {
                const identifiant = req.params.id;
                const name = req.params.name;
                res.send(`vous avez demander le pokemon nÂ°${identifiant} qui s'appele ${name}`);
            });